Excercise 1 ------------------------------------------------------------------------------

select 
	"Artist"."Name" as "Artist Name", 
	case when "Album"."Title" is null then 'No album' else  "Album"."Title" end as "Album Name"
from "Artist" 
left join "Album" 
on "Artist"."ArtistId" = "Album"."ArtistId"
order by "Artist"."Name"

Excercise 2 ------------------------------------------------------------------------------

select "Artist"."Name" as "Artist Name", "Album"."Title" as "Album Name"
from "Artist"
inner join "Album"
on  "Artist"."ArtistId" = "Album"."ArtistId"
order by "Artist"."Name" desc

Excercise 3 ------------------------------------------------------------------------------

select "Artist"."Name" as "Artist Name"
from "Artist"
left join "Album"
on  "Artist"."ArtistId" = "Album"."ArtistId"
where "Album"."Title" is null
order by "Artist"."Name"

Excercise 4 ------------------------------------------------------------------------------

select "Artist"."Name" as "Artist Name", Count("Album"."Title")  as "No of albums"
from "Artist"
inner join "Album"
on  "Artist"."ArtistId" = "Album"."ArtistId"
group by "Artist"."Name"
order by "No of albums" desc, "Artist"."Name" asc

Excercise 5 ------------------------------------------------------------------------------

select "Artist"."Name" as "Artist Name", Count("Album"."Title")  as "No of albums"
from "Artist"
inner join "Album"
on  "Artist"."ArtistId" = "Album"."ArtistId"
group by "Artist"."Name"
having Count("Album"."Title") >= 10
order by "No of albums" desc, "Artist"."Name" asc

Excercise 6 ------------------------------------------------------------------------------

select "Artist"."Name" as "Artist Name", Count("Album"."Title")  as "No of albums"
from "Artist"
inner join "Album"
on  "Artist"."ArtistId" = "Album"."ArtistId"
group by "Artist"."Name"
order by "No of albums" desc
limit 3

Excercise 7 ------------------------------------------------------------------------------

select "Artist"."Name" as "Artist Name", "Album"."Title" as "Album Title", "Track"."Name" as "Track"
from "Artist"
	inner join "Album" on  "Artist"."ArtistId" = "Album"."ArtistId"
	inner join "Track" on "Track"."AlbumId" = "Album"."AlbumId"
where "Artist"."Name" = 'Santana'
order by "Track"."TrackId"

Excercise 8 ------------------------------------------------------------------------------

select 
	"Employee"."FirstName" || ' ' || "Employee"."LastName" as "Employee name", 
	"Employee"."EmployeeId" as "Employee ID",
	"Employee"."Title" as "Employee Title",
	(
		select "Employee2"."FirstName" || ' ' || "Employee2"."LastName"
		from "Employee" as "Employee2"
		where "Employee"."ReportsTo" = "Employee2"."EmployeeId"
	) as "Manager Name",
	(
		select "Employee2"."Title"
		from "Employee" as "Employee2"
		where "Employee"."ReportsTo" = "Employee2"."EmployeeId"
	) as "Manager Title",
	(
		select "Employee2"."EmployeeId"
		from "Employee" as "Employee2"
		where "Employee"."ReportsTo" = "Employee2"."EmployeeId"
	) as "Manager ID"
from "Employee"
order by "Employee"."EmployeeId"

Excercise 9 ------------------------------------------------------------------------------

create or replace view top_employees 
as
select 
	"Employee"."FirstName" || ' ' || "Employee"."LastName" as "emp_name", 
	"Employee"."EmployeeId" as "emp_id",
	Count("Customer"."SupportRepId") as "cust_count"
from "Employee"
join "Customer" on "Customer"."SupportRepId" = "Employee"."EmployeeId"
group by "emp_name", "emp_id"


select  "Employee"."FirstName" || ' ' || "Employee"."LastName" as "emp_name", 
		"Customer"."FirstName" || ' ' || "Customer"."LastName" as "cust_name"
from "Customer"
join "Employee" on "Employee"."EmployeeId" = "Customer"."SupportRepId"
where "Employee"."EmployeeId" in (select emp_id
					 from top_employees
					 order by cust_count desc
					 limit 1)
order by "cust_name"

Excercise 10 ------------------------------------------------------------------------------

insert into "MediaType"
values (6, 'MP3')

create or replace function prevent_MP3_insert()
	returns trigger
	language plpgsql
as
$$
begin
	if "new"."MediaTypeId" = 6 then
		return null;
	end if;
	
	return new;
end;
$$


create or replace trigger prevent_MP3_insert_trigger
	before insert
	on "Track"
	for each row
	execute procedure prevent_MP3_insert();

Excercise 11 ------------------------------------------------------------------------------
	
create table Tracks_Audit(
	operation text,
	datetime date,
	username text,
	old_value text,
	new_value text
)	
	
	
create or replace function tracks_audit_log()
	returns trigger
	language plpgsql
as
$$
begin
	if(TG_OP = 'UPDATE') then
		insert into Tracks_Audit
			values(
				'UPDATE',
				current_date,
				current_user,
				row(old.*),
				row(new.*));
				
	elseif(TG_OP = 'INSERT') then
		insert into Tracks_Audit
			values(
				'INSERT',
				current_date,
				current_user,
				'',
				row(new.*));
	elseif(TG_OP = 'DELETE') then
		insert into Tracks_Audit
			values(
				'DELETE',
				current_date,
				current_user,
				row(old.*),
				'');
	end if;
	
	return new;
end;
$$


create or replace trigger track_audit
after update or insert or delete
on "Track"
for each row
execute procedure tracks_audit_log()
	
	
insert into "Track"("TrackId", "Name", "MediaTypeId", "Milliseconds", "UnitPrice")
values(1309111, 'd', 1, 1, 1)

update "Track"
set "UnitPrice" = 10;

delete 
from "Track"
where "TrackId" < 2



